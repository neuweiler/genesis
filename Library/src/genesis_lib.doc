TABLE OF CONTENTS

genesis.library/ClearUserList
genesis.library/FreeUser
genesis.library/GetFileSize
genesis.library/GetGlobalUser
genesis.library/GetUser
genesis.library/GetUserName
genesis.library/IsOnline
genesis.library/ParseConfig
genesis.library/ParseEnd
genesis.library/ParseNext
genesis.library/ParseNextLine
genesis.library/ReadFile
genesis.library/ReloadUserList
genesis.library/SetGlobalUser
genesis.library/WriteFile
genesis.library/ClearUserList                   genesis.library/ClearUserList

    NAME
        ClearUserList -- Clear the internal user list.

    SYNOPSIS
        ClearUserList( )


        VOID ClearUserList( VOID );

    FUNCTION
        Clears the libraries internal userlist.

    INPUTS
        None.

    RESULT
        Nothing returned.

    NOTES
        This function should not be called in a standard situation. 
        In fact, it should only be called by Genesis itself.

    BUGS

    SEE ALSO
        ReloadUserList(), GetUser(), GetGlobalUser(), GetUserName().
genesis.library/FreeUser                             genesis.library/FreeUser

    NAME
        FreeUser -- Free a previously aquired user structure.

    SYNOPSIS
        FreeUser( user )
                  A0

        VOID FreeUser( struct User * );

    FUNCTION
        
        Free a user structure that was returned by GetUser() or
        GetGlobalUser().

    INPUTS
        user = pointer to the user that was returned by GetUser() or
               GetGlobalUser().

    RESULT
        Nothing returned.

    NOTES

    BUGS

    SEE ALSO
        GetUser(), GetGlobalUser()
genesis.library/GetFileSize                       genesis.library/GetFileSize

    NAME
        GetFileSize -- Get the size of a file.

    SYNOPSIS
        size = GetFileSize( file )
        D0                  A0

        LONG ClearUserList( STRPTR );

    FUNCTION
        Returns the size of a given file.
        Can also be used to find out if a file/dir exists or if the given
        filename is a directory.

    INPUTS
        file = string holding the filename.

    RESULT
        Returns the size of the file, -1 if file/dir does not exist,
        -2 if 'file' is a directory.

    NOTES
        A result of 0 does not mean the file does not exist. It might
        simply be empty.

    BUGS

    SEE ALSO
       
genesis.library/GetGlobalUser                   genesis.library/GetGlobalUser

    NAME
        GetGlobalUser -- Find currently logged in global user.

    SYNOPSIS
        user = GetGlobalUser( )
        D0

        struct User *ClearUserList( VOID );

    FUNCTION
        If a global user has logged in before (also with a different
        application) this function will return a copy of this global user.
        Otherwise NULL will be returned and you can use GetUser() and
        SetGlobalUser() to login somebody globally.
        This function will not popup a userrequester so it can be used to
        check if a user is logged in.
        You should use this function whenever possible so the user will be
        confronted with as little requesters as possible.

        Example:
        1. App #1 opens the library and calls GetGlobalUser(). It gets
           NULL as a result and therefore calls GetUser() and gives the
           result of GetUser() to SetGlobalUser().
        2. Genesis opens the library and wants to login a user with
           GetGlobalUser(). The user that previously logged in with
           App #1 will be used without any requester.
        3. App #2 does the same (GetGlobalUser()). But a different account
           should be used locally (e.g. a different account for a mail
           program). App #2 can then use GetUser() to get a local user.
           The global user won't be changed.

    INPUTS
        None.

    RESULT
        A pointer to a struct User that holds a copy of the global user
        or NULL if no global user is set.

    NOTES
        Use FreeUser() to free the memory allocated by this function.

    BUGS

    SEE ALSO
        FreeUser(), GetUser(), SetGlobalUser()
genesis.library/GetUser                               genesis.library/GetUser

    NAME
        GetUser -- Login a user.

    SYNOPSIS
        user = GetUser( name, password, title, flags )
        D0              A0    A1        A2     D0

        struct User *GetUser( STRPTR, STRPTR, STRPTR, LONG );

    FUNCTION
        Used this function to login a user with password verification.
        You can specifiy a username to query the password for a specific
        user. If you specify a title, it will appear above the user/password
        gadgets as a TextObject (so you can use standard MUI formatting)
        It will open a MUI password requester only if necessary (if a
        password has to be entered).

    INPUTS
        name     = can be used to login a specific user. If NULL the user can
                   enter a name too. (optional)
        password = if known, the password of the user (or NULL)
        title    = some text which appears in the req or NULL. (optional)
        flags    = see libraries/genesis.h

    RESULT
        A pointer to a struct User that contains all the user information if
        authentication was successful, otherwise NULL.

    NOTES
        * Use FreeUser() to free the memory allocated by this function.
        * This function will open muimaster.library and create a MUI
          application automatically. So it can even be called from a non-mui
          application.

    BUGS

    SEE ALSO
        FreeUser(), GetGlobalUser(), SetGlobalUser()
genesis.library/GetUserName                       genesis.library/GetUserName

    NAME
        GetUserName -- Get the name of a user.

    SYNOPSIS
        success = GetUserName( user_number, buffer, len )
        D0                     D0           A0      D1

        BOOL GetUserName( LONG, STRPTR, LONG);

    FUNCTION
        This function uses the library's internal user list and if the given
        user number exists, it copies the name of the user into the buffer.
        It can be used to browse through the user list and gather the
        names of all users or simply get one at a specific position.

        Example to build a userlist in a MUI List:

        long pos = 0;
        char buf[41];

        while(GetUserName(pos++, buf, 40))
           DoMethod(list, MUIM_List_InsertSingle, buf,
                    MUIV_List_Insert_Bottom);

    INPUTS
        user_number = position of user in database (0 to #users - 1)
        buffer      = buffer to hold the name of the user
        len         = size of the buffer

    RESULT
        TRUE if a user at the specified position was found, otherwise FALSE.

    NOTES
        
    BUGS

    SEE ALSO
        ReloadUserList()        
genesis.library/IsOnline                            genesis.library/IsOnline

    NAME
        IsOnline -- Check if at least one interface is online.

    SYNOPSIS
        success = IsOnline( cmd )
        D0                  D0

        BOOL IsOnline( LONG );

    FUNCTION
        Check if Genesis is running and at least one interface is online.
        If desired by the application, this call can throw up a requester
        asking if Genesis should go online or it could also force Genesis
        to go online. If necessary Genesis is launched automatically.

    INPUTS
        cmd: NULL if only querying the current online state.
             IOC_AskUser will open a requester when no iface is online
             and ask the user if he wants to go online now (with 1° iface).
             IOC_Force will put the primary iface online if no iface was
             online.

    RESULT
        TRUE when at least one interface is online.

    NOTES

    BUGS

    SEE ALSO

genesis.library/ParseConfig                       genesis.library/ParseConfig

    NAME
        ParseConfig -- Initialize the parsing of a config file.

    SYNOPSIS
        success = ParseConfig( file, pc_data )
        D0                     A0    A1

        BOOL ClearUserList( STRPTR, sturct ParseConfig_Data * );

    FUNCTION
        Initialize the parsing of a config file with the following syntax:

        argument1 "contents1 ..."
        argument2 "contents2 ..."
        argument3 "contents3 ..."
        ...


    INPUTS
        file    = filename of the config file
        pc_data = pointer to an empty ParseConfig_Data structure. It is used
                  to keep the temporary buffer and to access the data.

    RESULT
        TRUE if successful (opening file and allocating mem).

    NOTES

    BUGS

    SEE ALSO
        ParseEnd(), ParseNext(), ParseNextLine()
genesis.library/ParseEnd                             genesis.library/ParseEnd

    NAME
        ParseEnd -- Free memory that was allocated with ParseConfig().

    SYNOPSIS
        ParseEnd( pc_data )
                  A0

        VOID ParseEnd( struct ParseConfig_Data * );

    FUNCTION
        Frees memory that was allocated with ParseConfig().

    INPUTS
        pc_data = pointer to a struct ParseConfig_Data that was previously
                  initialized with ParseConfig().

    RESULT
        Nothing returned.

    NOTES
        This function should be called after every successfull call of
        ParseConfig (and after the contents have been analyzed with
        ParseNext()).

    BUGS

    SEE ALSO
        ParseConfig(), ParseNext(), ParseNextLine()
genesis.library/ParseNext                           genesis.library/ParseNext

    NAME
        ParseNext -- Load next line of config file into structure.

    SYNOPSIS
        success = ParseNext( pc_data )
        D0                   A0

        BOOL ParseNext( struct ParseConfig_Data * );

    FUNCTION
        After initializing pc_data with ParseConfig() you can read the
        config file line by line. This function loads the argument and
        contents into pc_data. After calling it, pc_data->pc_argument
        contains the line's argument and pc_data->pc_contents its contents.

        Example:

        struct ParseConfig_Data pc_data;

        if(ParseConfig("AmiTCP:db/genesis.conf", &pc_data))
        {
           while(ParseNext(&pc_data);
           {
              Printf("argument: %ls   contents: %ls\n", pc_data.pc_argument,
                     pc_data.pc_contents);
           }
           ParseEnd(&pc_data);
        }

    INPUTS
        pc_data = pointer to a struct ParseConfig_Data that was previously
                  initialized with ParseConfig().

    RESULT
        TRUE if successfull, FALSE if end of file has been reached.

    NOTES
        

    BUGS

    SEE ALSO
        ParseConfig(), ParseNextLine(), ParseEnd()
genesis.library/ParseNextLine                   genesis.library/ParseNextLine

    NAME
        ParseNextLine -- Load entire line into pc_data structure.

    SYNOPSIS
        success = ParseNextLine( pc_data )
        D0                       A0

        BOOL ParseNextLine( struct ParseConfig_Data * );

    FUNCTION
        Similar to ParseNext() but instead of splitting the line into
        "argument" and "contents", the entire line will be read into
        pc_data->ps_contents. pc_data->pc_argument will be empty.
        So it can be used to simply parse a file line by line.

    INPUTS
        pc_data = pointer to a struct ParseConfig_Data that was previously
                  initialized with ParseConfig().

    RESULT
        TRUE if successfull, FALSE if end of file has been reached.

    NOTES
        Although fgets() could be used to achieve the same, this function
        is faster because ParseConfig() reads the entire file at once
        into a buffer. 

    BUGS

    SEE ALSO
        ParseConfig(), ParseNext(), ParseEnd()
genesis.library/ReadFile                             genesis.library/ReadFile

    NAME
        ReadFile -- Load the contents of a file into a buffer.

    SYNOPSIS
        size = ReadFile( file, buffer, len )
        D0               A0    A1      D0

        LONG ReadFile( STRPTR, STRPTR, LONG );

    FUNCTION
        Loads the contents of a file into a given buffer.

    INPUTS
        file   = name of the file to load
        buffer = buffer for the file contents
        len    = size of the buffer

    RESULT
        Number of bytes that have actually been read into the buffer
        or -1 if the file does not exist.

    NOTES
        The buffer does not get allocated by this function.

    BUGS

    SEE ALSO
        WriteFile()
genesis.library/ReallocCopy                       genesis.library/ReallocCopy

    NAME
        ReallocCopy -- strcpy() for pointers.

    SYNOPSIS
        new = ReallocCopy( dest, source


        STRPTR ReallocCopy( STRPTR *, STRPTR );

    FUNCTION
        Simmilar to strcpy(dest, source); but dest is not a char-array but
        the address of a pointer (which points itself to a string in a
        memory space that was previously allocated with AllocVec).
        So ReallocCopy() can be used to alloc memory and copy a string.
        If *dest is not NULL then the memory space it is pointing to will be
        freed by using FreeVec(*dest). Then memory will be allocated of the
        size of source+1 and source will be copied to the new allocated
        buffer.

        Too compilcated ? Here an example:

        VOID any_func(STRPTR source1, source2)
        {
           STRPTR huge_string = NULL;

           ReallocCopy(&huge_string, source1);   // allocates mem and copies source1
           ...
           ...
           ReallocCopy(&huge_string, source2);   // frees huge_string, allocs mem for
                                                    source2 and copies it over.
        }

        This would do exactly the same:
        
        VOID any_func(STRPTR source1, source2)
        {
           STRPTR huge_string = NULL;

           if(huge_string = AllocVec(strlen(source1) + 1, MEMF_ANY))
              strcpy(huge_string, source1);
           ...
           ...
           if(huge_string)
              FreeVec(huge_string);
           if(huge_string = AllocVec(strlen(source2) + 1, MEMF_ANY))
              strcpy(huge_string, source2);
        }

        But ReallocCopy uses less memory and makes the code more readable.

    INPUTS
        dest   = the address of the destination pointer (a pointer to a
                 pointer), NOT the pointer itself !
                 If not zero, it will be freed with FreeVec().
        source = pointer to source string.

    RESULT
        The destination's new buffer-address.

    NOTES
        In case you pass the pointer instead of the pointer's address in
        dest, the application WILL crash !

    BUGS

    SEE ALSO

genesis.library/ReloadUserList                 genesis.library/ReloadUserList

    NAME
        ReloadUserList -- Reload the internal username list.

    SYNOPSIS
        ReloadUserList( )


        VOID ReloadUserList( VOID );

    FUNCTION
        Reload the internal username list.
        If your application modifies AmiTCP:db/passwd - the user database -
        then it should call this function so the internal username list
        that is used for GetUserName() is always up-to-date.

    INPUTS
        None.

    RESULT
        Nothing returned.

    NOTES

    BUGS

    SEE ALSO
        GetUserName()
genesis.library/SetGlobalUser                   genesis.library/SetGlobalUser

    NAME
        SetGlobalUser -- Change the global user.

    SYNOPSIS
        SetGlobalUser( user )


        VOID SetGlobalUser( struct User * );

    FUNCTION
        This function sets the global user to the user passed with user.
        The next time GetGlobalUser() is called, the calling application
        will get a copy of this user's structure without the need to call
        GetUser() which opens a requester.

    INPUTS
        user = pointer to a struct User that was previously returned by
               GetUser(). Can be Zero to "logout" the global user.

    RESULT
        Nothing returned.

    NOTES
        The user will be copied so you can free it after calling this function.

    BUGS

    SEE ALSO
        GetGlobalUser(), GetUser()
genesis.library/WriteFile                           genesis.library/WriteFile

    NAME
        WriteFile -- Write the contents of a buffer to a file.

    SYNOPSIS
        success = WriteFile( file, buffer, len)
        D0                   A0    A1      D0

        BOOL WriteFile( STRPTR, STRPTR, LONG );

    FUNCTION
        This function saves the contents of buffer to a file.

    INPUTS
        file   = name of the destination file
        buffer = buffer holding the file contents
        len    = bytes to be written or -1 for NULL terminated strings

    RESULT
        TRUE if file was successfully created and written number of bytes
        is equal to len.

    NOTES
        Although this function seems a bit unnecessary, all genesis
        applications make excessive use of it (as ReadFile()). It was moved
        into the library to save memory and if it can be used in other
        applications too, even better.

    BUGS

    SEE ALSO
        ReadFile()

