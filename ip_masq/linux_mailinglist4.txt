<!-- received="Sat Sep 28 00:24:53 1996 EST" -->
<!-- sent="Fri, 27 Sep 1996 15:47:11 +0100" -->
<!-- name="Nigel Metheringham" -->
<!-- email="Nigel.Metheringham@theplanet.net" -->
<!-- subject="Re: IP Masquerading (checksums)" -->
<!-- id="m0v6eC8-000BFeC@dingo.theplanet.co.uk" -->
<!-- inreplyto="IP Masquerading (checksums)" -->
<title>Linux-Net Archive: Re: IP Masquerading (checksums)</title>
<h1>Re: IP Masquerading (checksums)</h1>
Nigel Metheringham (<i>Nigel.Metheringham@theplanet.net</i>)<br>
<i>Fri, 27 Sep 1996 15:47:11 +0100</i>
<p>
<ul>
<li> <b>Messages sorted by:</b> <a href="date.html#24">[ date ]</a><a href="index.html#24">[ thread ]</a><a href="subject.html#24">[ subject ]</a><a href="author.html#24">[ author ]</a>
<!-- next="start" -->
<li> <b>Next message:</b> <a href="0025.html">Matthias Urlichs: "Re: IP Masquerading (checksums)"</a>
<li> <b>Previous message:</b> <a href="0023.html">Remco van de Meent: "Re: IP Masquerading: No good for FTP?"</a>
<!-- nextthread="start" -->
<!-- reply="end" -->
</ul>
<hr>
<!-- body="start" -->
} On Tue, 24 Sep 1996, Remco van de Meent wrote:<br>
} <br>
} &gt; If you wanna loose them, why don't you just simply comment out the code<br>
} &gt; that log's such things in the source code for ip_masq. (though I dunno<br>
} &gt; where to find it, never looked after it).<br>
<p>
Its obvious and easy to find... that message only appears in 2 places <br>
in the code (incoming and outgoing masquerade).  Rather than <br>
commenting out a better solution may be to reduce the priority of the <br>
message so that it is ignored by default - take it down to debug <br>
level.<br>
<p>
} Here we come to the ``semantic'' question of masquerading, not being<br>
} a router nor an application-level proxy ... (something in between ;).<br>
} So, should we toss corrupted pkts or leave detection to linkends like a<br>
} router? Maybe we should only spend CPU cycles checking packets that go<br>
} through ip_masq application modules.<br>
<p>
OK, here is my justification for the current behaviour.<br>
<p>
Masquerading depends on rewriting the IP and higher protocol <br>
(TCP/UDP) headers to readdress packets to/from the new ports.<br>
<p>
This rewriting obviously changes the packet checksums - both IP and <br>
TCP/UDP.<br>
<p>
The code *used* to rewrite the packets then calculate and insert the <br>
checksums for the new packet.  This has the *very* bad side effect <br>
that corrupt data was (incorrectly) validated (by which I mean made <br>
to appear valid) by the masquerade.  This could have "interesting" <br>
side effects and was obviously a no-no.<br>
<p>
I added code to check the packets before tampering, so that we did <br>
not tamper with corrupt packets, but instead dropped them.<br>
<p>
This is correct but inefficient in that each packet is checksumed <br>
twice on the Linux masquerade box (to check and to force the new <br>
checksum).<br>
<p>
So thats what happens now....<br>
<p>
You could use checksum modification - there is some info on that <br>
somewhere (not to hand) - you know how you change the packet, you <br>
change the checksum similarly.  This gives a single change which is <br>
more CPU efficient - only one op which doesn't require reading the <br>
whole packet.  That is the right way to go on - and will stop these <br>
messages since you will never know if the data is corrupt (but the <br>
end point should detect it).<br>
<p>
However if there is an application helper this might radically change <br>
the data - change the packet length, tamper with all sorts of things, <br>
in which case checksum fudging becomes infeasible.<br>
<p>
So I suggest that the following is done for 2.1 (Keith - can you add <br>
this into your scheme).<br>
<p>
  + An application helper can register itself as checksum friendly<br>
    meaning it doesn't change data (or fudges the checksum itself<br>
    for data changes it makes).  Call this parameter needs_checksum<br>
    which is true if full checkumming is needed, and false if the<br>
    helper is checksum friendly.<br>
<p>
  + If a masq tunnel has no application helper then checksum <br>
modification<br>
    is performed.<br>
<p>
  + If a masq tunnel has a helper with needs_checksum unset (false), <br>
then<br>
    checksum modification is performed (prior to calling the helper).<br>
<p>
  + If a masq tunnel has a help with needs_checksum set (true), then<br>
    the incoming packet is checkummed (checked) and dropped if this <br>
fails.<br>
    The packet is then rewritten and passed to the helper.<br>
    The packet from the helper has a new checkum forced on it.<br>
<p>
This adds complexity, but in most cases is more efficient than right <br>
now.  The disadvantage is that bad data passes through, but the <br>
checksums will be wrong and the other end will reject it (well, it <br>
should!)  Unchecksummed UDP will still be dangerous!<br>
<p>
Comments please...<br>
<p>
	Nigel.<br>
<p>
<p>
<pre>
-- 
[ Nigel.Metheringham@theplanet.net   - Unix Applications Engineer ]
[ *Views expressed here are personal and not supported by PLAnet* ]
[ PLAnet Online : The White House          Tel : +44 113 251 6012 ]
[ Melbourne Street, Leeds LS2 7PS UK.      Fax : +44 113 2345656  ]
[[[ Welcome to Grace, arrived 01:37 BST, 18 Sept 1996, 5lb 15oz ]]]
</pre>
<!-- body="end" -->
<hr>
<p>
<ul>
<!-- next="start" -->
<li> <b>Next message:</b> <a href="0025.html">Matthias Urlichs: "Re: IP Masquerading (checksums)"</a>
<li> <b>Previous message:</b> <a href="0023.html">Remco van de Meent: "Re: IP Masquerading: No good for FTP?"</a>
<!-- nextthread="start" -->
<!-- reply="end" -->
</ul>
